# Generated by Django 2.2.12 on 2020-10-06 06:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnimalColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnimalInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=200)),
                ('age', models.CharField(max_length=200)),
                ('gender', models.CharField(max_length=200)),
                ('size', models.CharField(choices=[('Large', 'Large'), ('Medium', 'Medium'), ('Small', 'Small')], max_length=200)),
                ('name', models.CharField(max_length=200)),
                ('status', models.CharField(max_length=200)),
                ('photos', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(null=True), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='AnimalNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_news', models.URLField()),
                ('description_news', models.TextField()),
                ('heading', models.TextField()),
                ('main_text', models.TextField(null=True)),
                ('url_media', models.URLField(null=True)),
                ('time_post', models.CharField(max_length=100)),
                ('gallery_img', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(), blank=True, null=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='AnimalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('animal_type', models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NewestLogFileContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_filename', models.CharField(max_length=200, verbose_name='название файла логера')),
                ('content', models.TextField(null=True, verbose_name='Запись файла')),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Последние записи логов по файлам',
                'verbose_name': 'Последние записи логов по файлам',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('animal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='listanimal.AnimalInfo')),
            ],
        ),
        migrations.AddField(
            model_name='animalinfo',
            name='animal_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='listanimal.AnimalType'),
        ),
        migrations.AddField(
            model_name='animalinfo',
            name='color',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='listanimal.AnimalColor'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('favorit_animal', models.ManyToManyField(to='listanimal.AnimalInfo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
